// @flow

/*export*/ type MAGIC_EVENTS = "@init" | "@enter" | "@leave" | "@change" | "@miss";
/*export*/ type MAGIC_PHASES = "@current" | "@busy" | "@locked"

/*export*/ interface InternalMachine<State, Attributes, AvalablePhases, Messages, Signals> {
  attrs: Attributes;
  state: State;

  setState(newState: $Shape<State>): void;

  transitTo(phase: AvalablePhases): void;

  emit(message: Signals, ...args: any[]): void;

  trigger: (event: Messages, ...args: any[]) => void;
}

/*export*/ type OnCallback<State, Attributes, AvalablePhases, Messages, Signals> = (slots: InternalMachine<State, Attributes, AvalablePhases, Messages, Signals>, ...args: any[]) => Promise<any> | void;

/*export*/ interface MessagePhase<Phases> {
  phases: Phases[];
}

/*export*/ interface MessageHandler<State, Attrs, Phases, OnCallback> {
  phases: Phases[];
  callback: OnCallback;
}

type MessageHandlerArray<State, Attrs, Phases, OnCallback> = MessageHandler<State, Attrs, Phases, OnCallback>[];

/*export*/ type MessageHandlers<State, Attrs, Phases, Messages, OnCallback> = {
  [name: string]: MessageHandlerArray<State, Attrs, Phases, OnCallback>;
};

/*export*/ type HookArgument<Messages, State, Attributes> =
  InternalMachine<State, Attributes, "", Messages, "">
  & { message: Messages };
/*export*/ type OnHookCallback<Messages, State, Attributes, T> = (arg: HookArgument<Messages, State, Attributes>) => T | void;
/*export*/ type OffHookCallback<Messages, State, Attributes, T> = (arg: HookArgument<Messages, State, Attributes>, hookInfo: T) => void;

/*export*/ type HookCallback<Messages, State, Attributes, T = any> = {
  on: OnHookCallback<Messages, State, Attributes, T>;
  off: OffHookCallback<Messages, State, Attributes, T>;
};

/*export*/ type Hooks<State, Attributes, Messages> = {
  [K: Messages]: ?HookCallback<Messages, State, Attributes>
};

/*export*/ type Callbag<T, K> = (state: 0 | 1 | 2, payload: T) => K;

type FasteInstanceHooks<MessageHandlers, FasteHooks> = {
  handlers: MessageHandlers;
  hooks: FasteHooks;
};

type FastInstanceState<State, Attributes, Phases, Messages, Signals> = {
  state: State,
  attrs: Attributes;
  phase?: Phases | MAGIC_PHASES;
  instance?: InternalMachine<State, Attributes, Phases, Messages, Signals>
};

type ConnectCall<Signals> = (event: Signals, args: any[]) => void;

interface FastePutable<Messages> {
  put(message: Messages | MAGIC_EVENTS, ...args: any[]): FastePutable<Messages>;
}

declare interface FasteInstance<State, Attributes, Phases, Messages, Signals, MessageHandlers, FasteHooks> {

  constructor(state: FastInstanceState<State, Attributes, Phases, Messages, Signals>, handlers: FasteInstanceHooks<MessageHandlers, FasteHooks>): void;

  start(phase: ?Phases): FasteInstance<State, Attributes, Phases, Messages, Signals, MessageHandlers, FasteHooks>;

  attrs(attrs: Attributes): FasteInstance<State, Attributes, Phases, Messages, Signals, MessageHandlers, FasteHooks>;

  put(message: Messages | MAGIC_EVENTS, ...args: any[]): FasteInstance<State, Attributes, Phases, Messages, Signals, MessageHandlers, FasteHooks>;

  connect(plug: FastePutable<Signals> | ConnectCall<Signals>): FasteInstance<State, Attributes, Phases, Messages, Signals, MessageHandlers, FasteHooks>;

  observe(callback: (phase: Phases) => void): FasteInstance<State, Attributes, Phases, Messages, Signals, MessageHandlers, FasteHooks>;

  phase(): Phases | MAGIC_PHASES;

  instance(): InternalMachine<State, Attributes, Phases, Messages, Signals>;

  destroy(): FasteInstance<State, Attributes, Phases, Messages, Signals, MessageHandlers, FasteHooks>;
};

declare interface Faste<State, Attributes, Phases, Messages, Signals> {

  constructor(state ?: State, attrs ?: Attributes, messages ?: MessageHandlers<State, Attributes, Phases, Messages, OnCallback<State, Attributes, Phases, Messages, Signals>>, hooks ?: Hooks<State, Attributes, Phases>): void;

  on(eventName: Messages, phases: Phases[], callback: OnCallback<State, Attributes, Phases, Messages, Signals>): Faste<State, Attributes, Phases, Messages, Signals>;

  on(eventName: Messages, callback: OnCallback<State, Attributes, Phases, Messages, Signals>): Faste<State, Attributes, Phases, Messages, Signals>;

  hooks(hooks: Hooks<State, Attributes, Messages>): Faste<State, Attributes, Phases, Messages, Signals>;

  check(): boolean;

  scope(swapper: (stateIn: Faste<State, Attributes, Phases, Messages, Signals>) => void): Faste<State, Attributes, Phases, Messages, Signals>;

  create(): FasteInstance<State, Attributes, Phases, Messages, Signals, MessageHandlers<State, Attributes, Phases, Messages, OnCallback<State, Attributes, Phases, Messages, Signals>>, Hooks<State, Attributes, Phases>>;

  withState<T>(state: ?T): Faste<T, Attributes, Phases, Messages, Signals>;

  withAttrs<T>(attributes: ?T): Faste<State, T, Phases, Messages, Signals>;

  withPhases<T>(phases: ?T[]): Faste<State, Attributes, T | MAGIC_PHASES, Messages, Signals>;

  withMessages<T>(messages: ?T[]): Faste<State, Attributes, Phases, T | MAGIC_EVENTS, Signals>;

  withSignals<T>(signals: ?T[]): Faste<State, Attributes, Phases, Messages, T>;
}

declare export function faste<State, Attributes, Phases, Messages, Signals>(): Faste<State, Attributes, Phases, Messages, Signals>;